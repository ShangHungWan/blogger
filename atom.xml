<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sun 的學習筆記</title>
  
  <subtitle>Sun&#39;s note</subtitle>
  <link href="/blogger/atom.xml" rel="self"/>
  
  <link href="https://a24230928.github.io/blogger/"/>
  <updated>2022-06-03T17:24:10.144Z</updated>
  <id>https://a24230928.github.io/blogger/</id>
  
  <author>
    <name>Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Port_swigger_web_security_academy_sql_injection</title>
    <link href="https://a24230928.github.io/blogger/2022/06/04/port-swigger-web-security-academy-sql-injection/"/>
    <id>https://a24230928.github.io/blogger/2022/06/04/port-swigger-web-security-academy-sql-injection/</id>
    <published>2022-06-03T16:18:43.000Z</published>
    <updated>2022-06-03T17:24:10.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This article is the note of PortSwigger Web Security Academy’s <a href="https://portswigger.net/web-security/sql-injection" target="_blank" rel="noopener">SQL Injection</a>. I will take note of it and write some my opinion.</p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><ul><li>Retrieving hidden data</li><li>Subverting application logic</li><li>UNION attack: retrieve data from other databases or tables.</li><li>Examining the database</li><li>Blind SQL injection</li></ul><h3 id="Retrieving-hidden-data"><a href="#Retrieving-hidden-data" class="headerlink" title="Retrieving hidden data"></a>Retrieving hidden data</h3><p>For example, there is a URL:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//insecure-website.com/products?category=Gifts</span></span><br></pre></td></tr></table></figure><p>and SQL like:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">category</span> = <span class="string">'Gifts'</span> <span class="keyword">AND</span> released = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Thus, it can be injected by:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//insecure-website.com/products?category=' OR 1=1 --</span></span><br></pre></td></tr></table></figure><p>This will results in the SQL query, and show every products:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">category</span> = <span class="string">''</span> <span class="keyword">OR</span> <span class="number">1</span>=<span class="number">1</span> <span class="comment">--' AND released = 1</span></span><br></pre></td></tr></table></figure><h3 id="Subverting-application-logic"><a href="#Subverting-application-logic" class="headerlink" title="Subverting application logic"></a>Subverting application logic</h3><p>It can bypass login or other business logic too.</p><p>In case of SQL query like:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username = <span class="string">'wiener'</span> <span class="keyword">AND</span> <span class="keyword">password</span> = <span class="string">'bluecheese'</span></span><br></pre></td></tr></table></figure><p>We can login as administrator by input username <code>administrator&#39; --</code> and left password blank, results in the SQL query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username = <span class="string">'administrator'</span> <span class="comment">--' AND password = ''</span></span><br></pre></td></tr></table></figure><h3 id="UNION-attack"><a href="#UNION-attack" class="headerlink" title="UNION attack"></a>UNION attack</h3><p>We can use UNION to get other table’s data, for example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, description <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">category</span> = <span class="string">'&#123;input&#125;'</span></span><br></pre></td></tr></table></figure><p>and we input:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">' UNION <span class="keyword">SELECT</span> username, <span class="keyword">password</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="comment">--</span></span><br></pre></td></tr></table></figure><p>result in query:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, description <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">category</span> = <span class="string">''</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> username, <span class="keyword">password</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="comment">--'</span></span><br></pre></td></tr></table></figure><p>Then, we can get username and password from other table.</p><h3 id="Examining-the-database"><a href="#Examining-the-database" class="headerlink" title="Examining the database"></a>Examining the database</h3><p>To explot the database, we need to identify which database is it.</p><p>Because every database have unique syntax, function, or variable…(there are some examples below), we can use some <a href="https://portswigger.net/web-security/sql-injection/cheat-sheet" target="_blank" rel="noopener">cheat table</a> to determine it.</p><h4 id="database-specific-factors"><a href="#database-specific-factors" class="headerlink" title="database-specific factors"></a>database-specific factors</h4><ul><li>Syntax for string concatenation</li><li>Comments</li><li>Batched or stacked queries</li><li>Platform-specific APIs</li><li>Error messages</li></ul><p>After we know what kind of database is it, we can grab some informations about databases, tables, and columns.</p><p>For example, most database(MSSQL, MySQL, PostgreSQL…) have a database which store there information we need:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> information_schema.tables</span><br></pre></td></tr></table></figure><h3 id="Blind-SQL-injection"><a href="#Blind-SQL-injection" class="headerlink" title="Blind SQL injection"></a>Blind SQL injection</h3><p>When we can see the result of SQL query, we can use UNION to get the informations we need.</p><p>But if the application does not return any results, we can still exploit it by following methods:</p><ul><li>Conditionally change the logic of the query to trigger a detectable difference. For example, trigger an error such as a divide-by-zero.</li><li>Conditionally make a time delay.</li><li>Trigger an out-of-band interaction sush as placing the data into a DNS lookup for a domain we control.</li></ul><h2 id="How-to-detect-vulnerabilities"><a href="#How-to-detect-vulnerabilities" class="headerlink" title="How to detect vulnerabilities"></a>How to detect vulnerabilities</h2><p>To every entry point in the application, we can try:</p><ul><li>Submitting <code>&#39;</code> and looking for error or other abnormal response.</li><li>Submitting some SQL-specific syntax or conditions such as <code>OR 1=1</code> to change result of the query, and looking for differences in responses.</li><li>For those cannot see response, submitting payload to trigger time delays and looking for differences in the time taken to respond.</li></ul><h2 id="Second-order-SQL-Injection"><a href="#Second-order-SQL-Injection" class="headerlink" title="Second-order SQL Injection"></a>Second-order SQL Injection</h2><p>First, we need to talk about <code>First-order</code> SQL injection.</p><p><code>First-order</code> means the application takes user’s input and use it to excute an SQL query.</p><p>So, <code>Second-order</code>(that is, stored SQL injection) means the application store user’s input to database(or somewhere else). Later, the application retrieves the stored data and excute an SQL query with it.</p><p>This will happen because developers are aware of SQL injection vulnerabilities, so safely handle the direct input from user. But they forgot that <code>Second-order</code> SQL query is also get input from user, so remember “DONT TRUST ANY USER INPUT” when you develop any application.</p><h2 id="How-to-prevent"><a href="#How-to-prevent" class="headerlink" title="How to prevent"></a>How to prevent</h2><p>So after all, how do we prevent these vulnerabilites?</p><p>We can use parameterized query(also known as prepared statements) instead of directly concatenate strings together.</p><p>DONT USE:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query = <span class="string">"SELECT * FROM products WHERE category = '"</span>+ $input + <span class="string">"'"</span>;</span><br></pre></td></tr></table></figure><p>USE:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"SELECT * FROM products WHERE category = :category"</span>;</span><br><span class="line">$sth = $dbh-&gt;prepare($sql, <span class="keyword">array</span>(PDO::ATTR_CURSOR =&gt; PDO::CURSOR_FWDONLY));</span><br><span class="line">$sth-&gt;execute(<span class="keyword">array</span>(<span class="string">':category'</span> =&gt; <span class="string">'shoes'</span>));</span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>I think the most important lesson that SQLi bring us is “NEVER TRUST USER”.</p><p>As a developer, we need to make sure we know the meaning of every single line of code that we are writting. And trust no one.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://portswigger.net/web-security/sql-injection" target="_blank" rel="noopener">https://portswigger.net/web-security/sql-injection</a></li><li><a href="https://portswigger.net/web-security/sql-injection/cheat-sheet" target="_blank" rel="noopener">https://portswigger.net/web-security/sql-injection/cheat-sheet</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;This article is the note of Po
      
    
    </summary>
    
    
    
      <category term="web security" scheme="https://a24230928.github.io/blogger/tags/web-security/"/>
    
      <category term="sql injection" scheme="https://a24230928.github.io/blogger/tags/sql-injection/"/>
    
      <category term="port swigger" scheme="https://a24230928.github.io/blogger/tags/port-swigger/"/>
    
  </entry>
  
  <entry>
    <title>EOS Jungle2.0 Testnet With Scatter Desktop</title>
    <link href="https://a24230928.github.io/blogger/2020/05/11/EOS-Jungle2-0-Testnet-with-Scatter-Desktop/"/>
    <id>https://a24230928.github.io/blogger/2020/05/11/EOS-Jungle2-0-Testnet-with-Scatter-Desktop/</id>
    <published>2020-05-11T01:38:04.000Z</published>
    <updated>2021-09-05T06:17:36.335Z</updated>
    
    <content type="html"><![CDATA[<p>此篇旨在紀錄筆者透過 Scatter 桌面版使用 Jungle2.0 Testnet的過程及教學</p><h2 id="Generate-key"><a href="#Generate-key" class="headerlink" title="Generate key"></a>Generate key</h2><ol><li><p>打開Scatter，並點選 Wallet &gt; Generate Key<br><img src="https://i.imgur.com/oKJ3yeP.png" alt=""></p></li><li><p>選擇 EOSIO<br><img src="https://i.imgur.com/lueA2wS.png" alt=""></p></li><li><p>選擇 Key<br><img src="https://i.imgur.com/FXg23Rp.png" alt=""></p></li><li><p>此時 Scatter 即會幫你生成一個 Private Key，請自行保管好<br><img src="https://i.imgur.com/aUjkbB5.png" alt=""></p></li><li><p>按 Back 回到 Wallet的頁面 (步驟1.)，並將紅色框框中的 Public Key 複製下來<br><img src="https://i.imgur.com/bgycJfo.png" alt=""></p></li></ol><h2 id="Create-an-account"><a href="#Create-an-account" class="headerlink" title="Create an account"></a>Create an account</h2><ol><li><p><a href="https://monitor.jungletestnet.io/#account" target="_blank" rel="noopener">點此</a>註冊一個帳號</p></li><li><p>輸入 Account name，並將剛才的 Public Key 貼上在下面兩個欄位<br><img src="https://i.imgur.com/GLgU91k.png" alt=""></p></li></ol><h2 id="Get-Free-Tokens"><a href="#Get-Free-Tokens" class="headerlink" title="Get Free Tokens"></a>Get Free Tokens</h2><ol><li><a href="http://monitor.jungletestnet.io/#faucet" target="_blank" rel="noopener">點此</a>並輸入剛才的帳號名稱，就可以獲得 1 Token</li></ol><h2 id="Add-Jungle-2-Network-in-Scatter"><a href="#Add-Jungle-2-Network-in-Scatter" class="headerlink" title="Add Jungle 2 Network in Scatter"></a>Add Jungle 2 Network in Scatter</h2><ol><li><p>回到 Scatter，並點選 Networks &gt; Add Custom Network<br><img src="https://i.imgur.com/NLKUF1I.png" alt=""></p></li><li><ul><li>Name 中輸入一個可辨識的名稱</li><li>Host 輸入 jungle2.cryptolions.io</li><li>Protocol 為 https</li><li>Port 為 443</li><li>Chain ID 為 e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473<br>最後按下 Add 即可<br><img src="https://i.imgur.com/oUufXBu.png" alt=""></li></ul></li></ol><h2 id="Check-Network-Setting"><a href="#Check-Network-Setting" class="headerlink" title="Check Network Setting"></a>Check Network Setting</h2><ol><li>最後回 Wallet 頁面，確認是否確實連上測試鏈。只要兩個紅框處分別呈現帳號名稱，及剛剛拿到的1個 Free Token，即為成功連結測試鏈。</li></ol><p><img src="https://i.imgur.com/XyWA4LK.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此篇旨在紀錄筆者透過 Scatter 桌面版使用 Jungle2.0 Testnet的過程及教學&lt;/p&gt;
&lt;h2 id=&quot;Generate-key&quot;&gt;&lt;a href=&quot;#Generate-key&quot; class=&quot;headerlink&quot; title=&quot;Generate key
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ERC-20 Token Standard 簡介</title>
    <link href="https://a24230928.github.io/blogger/2020/05/11/ERC-20-Token-Standard-%E7%B0%A1%E4%BB%8B/"/>
    <id>https://a24230928.github.io/blogger/2020/05/11/ERC-20-Token-Standard-%E7%B0%A1%E4%BB%8B/</id>
    <published>2020-05-11T01:33:25.000Z</published>
    <updated>2021-09-05T06:17:36.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ERC-20-與-ERC-721-比較"><a href="#ERC-20-與-ERC-721-比較" class="headerlink" title="ERC-20 與 ERC-721 比較"></a>ERC-20 與 ERC-721 比較</h2><p><img src="https://i.imgur.com/yJRa1ri.png" alt=""></p><p>簡單來說，ERC20是「每個代幣都一樣」；而ERC721則是「每個代幣都有其獨特性」</p><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">contract ERC20Interface &#123;</span><br><span class="line">    function totalSupply() public constant returns (uint);</span><br><span class="line">    function balanceOf(address tokenOwner) public constant returns (uint balance);</span><br><span class="line">    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);</span><br><span class="line">    function transfer(address to, uint tokens) public returns (bool success);</span><br><span class="line">    function approve(address spender, uint tokens) public returns (bool success);</span><br><span class="line">    function transferFrom(address from, address to, uint tokens) public returns (bool success);</span><br><span class="line"></span><br><span class="line">    event Transfer(address indexed from, address indexed to, uint tokens);</span><br><span class="line">    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>總共有6個function以及2個event。其中constant的function是唯讀的，所以不會花費Gas。<br>Event只用於記錄，可以視為一般系統上的log功能。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string <span class="built_in">public</span> <span class="keyword">constant</span> <span class="type">name</span> = "Token Name";</span><br><span class="line">string <span class="built_in">public</span> <span class="keyword">constant</span> symbol = "SYM";</span><br><span class="line">uint8 <span class="built_in">public</span> <span class="keyword">constant</span> decimals = <span class="number">18</span>; // <span class="number">18</span> <span class="keyword">is</span> the most common number <span class="keyword">of</span> <span class="type">decimal</span> places</span><br></pre></td></tr></table></figure><p>另外還有三個需要設定的參數：name、symbol、decimals。name是Token的名字；symbol是Token的代稱（簡稱）；decimals是Token小數最多可以到幾位數，正常為18，也就是和Ether一樣。</p><h2 id="Function-說明"><a href="#Function-說明" class="headerlink" title="Function 說明"></a>Function 說明</h2><ol><li>totalSupply()，Token的發行總量。</li><li>balanceOf(address)，傳入地址的錢包的Token數量。</li><li>allowance(address A, address B)，A批准給B的Token量。</li><li>transfer(address A, uint num)，將數量為num的Token轉移給A。</li><li>approve(address A, uint num)，批准數量為num的Token轉移給A，需注意的是，這個function只是單純做「批准」這個動作，而沒有進行轉移。若需要轉移則要再呼叫transferFrom。</li><li>transferFrom(address, address, uint)，將數量為num的Token由A轉移給B。</li></ol><h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><p>Solidity版本 &gt;= 0.4.17</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref."></a>Ref.</h2><ul><li><a href="https://medium.com/7sevencoin/erc20%E5%92%8Cerc721%E4%B8%8D%E4%B8%80%E6%A8%A3%E5%9C%A8%E5%93%AA%E8%A3%A1-2e550bb0bea3" target="_blank" rel="noopener">ERC20, ERC721比較</a></li><li><a href="https://eips.ethereum.org/EIPS/eip-20" target="_blank" rel="noopener">ERC-20標準doc</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ERC-20-與-ERC-721-比較&quot;&gt;&lt;a href=&quot;#ERC-20-與-ERC-721-比較&quot; class=&quot;headerlink&quot; title=&quot;ERC-20 與 ERC-721 比較&quot;&gt;&lt;/a&gt;ERC-20 與 ERC-721 比較&lt;/h2&gt;&lt;p&gt;&lt;i
      
    
    </summary>
    
    
    
      <category term="ERC-20" scheme="https://a24230928.github.io/blogger/tags/ERC-20/"/>
    
      <category term="ERC-721" scheme="https://a24230928.github.io/blogger/tags/ERC-721/"/>
    
      <category term="Solidity" scheme="https://a24230928.github.io/blogger/tags/Solidity/"/>
    
  </entry>
  
</feed>
